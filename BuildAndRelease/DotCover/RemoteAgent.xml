<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RemoteAgent</name>
    </assembly>
    <members>
        <member name="T:JetBrains.Application.Defines">
             <summary>Pre-compile-time defined constants that emulate the C++ #define that has a value.</summary>
            <remarks>The set of #defines and their default values are given in an MSBuild file. The defauls could be overridden on the build server.</remarks>
        </member>
        <member name="F:JetBrains.Application.Defines.CompanyName">
             <summary>
              <para>
                <c>#define CompanyName JetBrains</c>
              </para>
              <para>Short company name.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.DateTimeForSubscriptionCheck">
             <summary>
              <para>
                <c>#define DateTimeForSubscriptionCheck </c>
              </para>
              <para>The date when the recent product's 2-digit version is released. Used for subscription license check.</para>
              <para>If the date is not set, product build time is used.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.DateTimeProductBirth">
             <summary>
              <para>
                <c>#define DateTimeProductBirth 2009-07-13</c>
              </para>
              <para>The date when the product was founded. Used for the lower copyright year and so on.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.GoogleAnalyticsProfileId">
             <summary>
              <para>
                <c>#define GoogleAnalyticsProfileId UA-36175489-2</c>
              </para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.GuidProductUpgradeCodeInstallationCenter">
             <summary>
              <para>
                <c>#define GuidProductUpgradeCodeInstallationCenter {DF895576-40DD-4008-A845-E18D5A796D0E}</c>
              </para>
              <para>Upgrade Code for the Installation Center family setups. In use starting with Platform-4.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.GuidVsActionsCommandSet">
             <summary>
              <para>
                <c>#define GuidVsActionsCommandSet {440D4099-5E59-4754-8169-AA01124DB1B8}</c>
              </para>
              <para>GUID for the command set of the product actions defined in Actions.Xml.
                 Each updatable action gets its GUID:ID pair with this GUID (this includes both action groups and executable actions).
                 Not sure about actions-with-group, though. 
                 In a VS-integrated product, must be overridden with a meaningful GUID.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.GuidVsDynamicCommandSet">
             <summary>
              <para>
                <c>#define GuidVsDynamicCommandSet {2C8417FA-DB9F-4E46-991E-9D886256A28E}</c>
              </para>
              <para>Command set GUID for the dynamic commands to be registered by the product at runtime. 
                In a VS-integrated product, must be overridden with a meaningful GUID.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.GuidVsGroupsCommandSet">
             <summary>
              <para>
                <c>#define GuidVsGroupsCommandSet {7FDFDEA5-CE22-4783-BABC-EA7F4EF137D3}</c>
              </para>
              <para>Command set GUID for the VS Command Groups that are generated to accomodate commands (created from IExecutableActions) in menus (created from IActionGroups).
                The IDs are entirely autogenerated by VSCT/CTO tool. 
                In a VS-integrated product, must be overridden with a meaningful GUID.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.GuidVsPackageCoClass">
             <summary>
              <para>
                <c>#define GuidVsPackageCoClass {7FFD1A80-7A5A-49B2-A39B-491C750984FF}</c>
              </para>
              <para>GUID of the VS Package COM object CoClass. Used on the autogenerated VS package class, and everywhere in the Registry. 
                In a VS-integrated product, must be overridden with a meaningful GUID.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.IsModeAnnotateCallStacks">
             <summary>
              <para>
                <c>#define IsModeAnnotateCallStacks False</c>
              </para>
              <para>Whether call stacks should be annotated when calling standard object methods. If there's a graph of standard objects identifyable only by names (eg IProperty, ICollection, ISignal, etc), a callstack of their interaction does not give out the names of the entities, unless this option is turned on. Has a perf impact.</para>
              <para>Default is ON. OFF for production builds.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.IsModeAssert">
             <summary>
              <para>
                <c>#define IsModeAssert False</c>
              </para>
              <para>Whether debug asserts should be active and throw runtime exceptions.</para>
              <para>Default is ON. OFF for production builds.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.IsModeReportExceptions">
             <summary>
              <para>
                <c>#define IsModeReportExceptions False</c>
              </para>
              <para>Whether exceptions are shown to the users. When OFF, the exceptions are silently omitted.</para>
              <para>Default is ON. OFF for production builds.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.IsModeStatistics">
             <summary>
              <para>
                <c>#define IsModeStatistics False</c>
              </para>
              <para>Whether statistics should be collected by the Statistics class.</para>
              <para>Default is OFF.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.IsMsiIncludePdb">
             <summary>
              <para>
                <c>#define IsMsiIncludePdb False</c>
              </para>
              <para>Whether PDBs for product binaries should be packed into the Setup.</para>
              <para>If True, it is an error if a PDB is missing.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.IsMsiIncludeXmlDoc">
             <summary>
              <para>
                <c>#define IsMsiIncludeXmlDoc True</c>
              </para>
              <para>Whether XmlDocs for product binaries should be packed into the Setup.</para>
              <para>If True, it is an error if an XmlDoc file is missing.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.IsMsiProductBinariesStrongName">
             <summary>
              <para>
                <c>#define IsMsiProductBinariesStrongName True</c>
              </para>
              <para>Whether product binaries packed into MSI must have strong names. If True, Setup build will fail unless assemblies have strong names.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.IsReleaseLicenseAgreement">
             <summary>
              <para>
                <c>#define IsReleaseLicenseAgreement True</c>
              </para>
              <para>Whether the Release license RTF file should be embedded into the installer. Default is False, which takes the pre-release file.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.LicenseProductFamily">
             <summary>
              <para>
                <c>#define LicenseProductFamily 59BB7CF0-D203-4E54-9A5F-04FBB1AEBCD4</c>
              </para>
              <para>A license GUID identifying the product family of the license. Now as we're using version numbers in the license (unlike early versions of ReSharper), this should be persisted throughout the product lifetime.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.LicenseSeed">
             <summary>
              <para>
                <c>#define LicenseSeed RLA90VMnIfMXmT4jbUVOo64qnJqs6APs7SgNXcQVoeeLMp5BpmU4fdw+impX+Wpd</c>
              </para>
              <para>The license state written to the Registry by the installer, which provides for a free trial.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.LicenseSupportIdentifier">
             <summary>
              <para>
                <c>#define LicenseSupportIdentifier DD1390D2-2986-498F-952A-4753C10337E2</c>
              </para>
              <para>An identifier for the evaluation license. Change it to reset the evaluation period.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ModeAnnotateCallStacksName">
             <summary>
              <para>
                <c>#define ModeAnnotateCallStacksName JET_MODE_ANNOTATE_CALL_STACKS</c>
              </para>
              <para>Name of the IsModeAssert-induced conditional compilation symbol.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ModeAssertName">
             <summary>
              <para>
                <c>#define ModeAssertName JET_MODE_ASSERT</c>
              </para>
              <para>Name of the IsModeAssert-induced conditional compilation symbol.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ModeReportExceptionsName">
             <summary>
              <para>
                <c>#define ModeReportExceptionsName JET_MODE_REPORT_EXCEPTIONS</c>
              </para>
              <para>Name of the IsModeReportExceptions-induced conditional compilation symbol.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ModeStatisticsName">
             <summary>
              <para>
                <c>#define ModeStatisticsName JET_MODE_STATISTICS</c>
              </para>
              <para>Name of the IsModeAssert-induced conditional compilation symbol.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.MsiSupportedVsVersionsList">
             <summary>
              <para>
                <c>#define MsiSupportedVsVersionsList 8.0;9.0;10.0;11.0</c>
              </para>
              <para>The list of VS Versions the installer should be able to install. Note that adding a new version requires modification of WiX code (and maybe some of the C++ code too). Removing versions from this list should generally go smoothly. Must follow the C++ vs versions lsit format, which is semicolon-separater major.minor.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NetfxRequiredVersionBuild">
             <summary>
              <para>
                <c>#define NetfxRequiredVersionBuild 0</c>
              </para>
              <para>The minimum .NET Framework version (Build component) required for installing &amp; runnning this product. The platform default is the minimum version required by the platform itself. Usually it's the same for the product.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NetfxRequiredVersionMajor">
             <summary>
              <para>
                <c>#define NetfxRequiredVersionMajor 3</c>
              </para>
              <para>The minimum .NET Framework version (Major component) required for installing &amp; runnning this product. The platform default is the minimum version required by the platform itself. Usually it's the same for the product.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NetfxRequiredVersionMinor">
             <summary>
              <para>
                <c>#define NetfxRequiredVersionMinor 5</c>
              </para>
              <para>The minimum .NET Framework version (Minor component) required for installing &amp; runnning this product. The platform default is the minimum version required by the platform itself. Usually it's the same for the product.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NetfxRequiredVersionRevision">
             <summary>
              <para>
                <c>#define NetfxRequiredVersionRevision 0</c>
              </para>
              <para>The minimum .NET Framework version (Revision component) required for installing &amp; runnning this product. The platform default is the minimum version required by the platform itself. Usually it's the same for the product.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NumLicenseAppVersion">
             <summary>
              <para>
                <c>#define NumLicenseAppVersion 2005</c>
              </para>
              <para>Application version for the licensing subsystem. Usually changes along with the ProductVersionMajor, but has its own numbering plan.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NumLicenseFeedbackRequestDays">
             <summary>
              <para>
                <c>#define NumLicenseFeedbackRequestDays 10</c>
              </para>
              <para>Number of days after installation and before feedback of whatever kind is requested.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NumLicenseFreeTrialDays">
             <summary>
              <para>
                <c>#define NumLicenseFreeTrialDays 30</c>
              </para>
              <para>Free trial days for a newly-installed product.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NumLicenseLeftDaysNotification">
             <summary>
              <para>
                <c>#define NumLicenseLeftDaysNotification 3</c>
              </para>
              <para>Number of days before license expires to notify the user of that.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NumTimeBombDays">
             <summary>
              <para>
                <c>#define NumTimeBombDays 0</c>
              </para>
              <para>The product will be inoperational when this time since build date expires. 0 means never expire (release mode), which is the default.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NUnitCpu">
             <summary>
              <para>
                <c>#define NUnitCpu x86</c>
              </para>
              <para>CPU platform of the NUnit runner process. Tests will be executed in this environment. Values: x86, x64, ANY.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NUnitInParallel">
             <summary>
              <para>
                <c>#define NUnitInParallel True</c>
              </para>
              <para>Allows running NUnit in parallel (one process per assembly, max CPU-count processes total).</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NUnitRuntime">
             <summary>
              <para>
                <c>#define NUnitRuntime v4.0</c>
              </para>
              <para>CLR version of the NUnit runner process. Tests will be executed in this environment. Values: v1.1, v2.0, v4.0, ANY.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NUnitVersion">
             <summary>
              <para>
                <c>#define NUnitVersion NUnit-2.6.1</c>
              </para>
              <para>Version of the NUnit runner used on TeamCity server. The special ReSharper make does better formatting of exception stack traces (without reversing the stacks).</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.PragmaOnce_Platform_Defines_Targets">
             <summary>
              <para>
                <c>#define PragmaOnce_Platform_Defines_Targets True</c>
              </para>
              <para>Pragma Once.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.PragmaOnce_Product_Defines_Targets">
             <summary>
              <para>
                <c>#define PragmaOnce_Product_Defines_Targets True</c>
              </para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ProductBranchName">
             <summary>
              <para>
                <c>#define ProductBranchName undefined</c>
              </para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ProductDisplayName">
             <summary>
              <para>
                <c>#define ProductDisplayName dotCover</c>
              </para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ProductFullName">
             <summary>
              <para>
                <c>#define ProductFullName dotCover 2.5</c>
              </para>
              <para>This full name is actually displayed in the User Interface in the About Boxes and such.
                  It should include the short product name and the marketing version of the product.
                  The bugfix upgate versions are visible thru this field only (eg “ProductName + " 3.0.2"”) and do not get into the actual technical file versions. Those can be found in the ProductInformation file linked into each of the projects.</para>
              <para>You MUST NOT use this define where an Application Descriptor is available (this includes any time when Shell is running). This is ONLY 
                for out-of-shell and build-time uses.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ProductName">
             <summary>
              <para>
                <c>#define ProductName dotCover</c>
              </para>
              <para>Name of the current product. If there're multiple products built on these sources, their least common generic name.</para>
              <para>The short ID-like product name, without any version suffixes.</para>
              <para>You MUST NOT use this define where an Application Descriptor is available (this includes any time when Shell is running). This is ONLY 
                for out-of-shell and build-time uses.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ProductStandaloneApplicationCaps">
             <summary>
              <para>
                <c>#define ProductStandaloneApplicationCaps None</c>
              </para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ProductUpgradeCodeLegacyVS0800">
             <summary>
              <para>
                <c>#define ProductUpgradeCodeLegacyVS0800 </c>
              </para>
              <para>Main historical Upgrade Code for the R# product line. In 3.0 era, was used by the VS80 branch only. Not used by the new products.</para>
              <para>Used by Installation Centers for detecting pre-Platform-4 products in VS80.</para>
              <para>Empty by default. Not a GUID type just to allow empty string values.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ProductUpgradeCodeLegacyVS0900">
             <summary>
              <para>
                <c>#define ProductUpgradeCodeLegacyVS0900 </c>
              </para>
              <para>Side Upgrade Code for the R# products. Was in use in the 3.0 era only, was used by the VS90 branch that had an upgrade line separate from that of VS80. Should be checked for when detecting older versions.</para>
              <para>Used by Installation Centers for detecting pre-Platform-4 products in VS90.</para>
              <para>Empty by default. Not a GUID type just to allow empty string values.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ProductUpgradeCodeLegacyVS1000">
             <summary>
              <para>
                <c>#define ProductUpgradeCodeLegacyVS1000 </c>
              </para>
              <para>Same as other ProductUpgradeCodeLegacy, but empty in all the products. Introduced for safe looping thru VS versions. Not a GUID type just to allow empty string values.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ProductVisualStudioIntegrationCaps">
             <summary>
              <para>
                <c>#define ProductVisualStudioIntegrationCaps Optional</c>
              </para>
              <para>A required parameter of a platform-based MSI Setup which defines the VS integration capabilities of the product.</para>
              <para>Defines whether the installer should suggest integrating the product into Visual Studio. Possible values are:</para>
              <para>“None” — the product has no VS integration capabilities. Example: early versions of some products like DotTrace Memory, Peek.</para>
              <para>“Optional” — the product can be used without VS, but also provides VS integration. Example: DotTrace Performance.</para>
              <para>“Required” — the product only exists as a VS extension and usually should not be installed without VS integration. Example: ReSharper.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.SccRevision">
             <summary>
              <para>
                <c>#define SccRevision CompiledWithoutBuildServer</c>
              </para>
              <para>Source code control revision string, if available. For a single SVN root, should be the revision number; for complicated cases — a freehand string exposing the source code control state.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.UriBuy">
             <summary>
              <para>
                <c>#define UriBuy http://www.jetbrains.com/dotcover/buy/</c>
              </para>
              <para>URI of the Webpage where the user could buy the product.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.UriCompany">
             <summary>
              <para>
                <c>#define UriCompany http://www.jetbrains.com</c>
              </para>
              <para>URI of the company Website.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.UriEvaluate">
             <summary>
              <para>
                <c>#define UriEvaluate http://www.jetbrains.com/dotcover/download/</c>
              </para>
              <para>URI of the Webpage where the user can download an evaluation version of the product.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.UriProduct">
             <summary>
              <para>
                <c>#define UriProduct http://www.jetbrains.com/dotcover/</c>
              </para>
              <para>Main product webpage URI. Also used for ARPURLINFOABOUT in the installer.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.UriProductCommunityNewsgroups">
             <summary>
              <para>
                <c>#define UriProductCommunityNewsgroups news://news.jetbrains.com/jetbrains.dotcover.community</c>
              </para>
              <para>URI to the product community (support/discussion) newsgroups.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.UriProductHelp">
             <summary>
              <para>
                <c>#define UriProductHelp http://www.jetbrains.com/dotcover/documentation/index.html</c>
              </para>
              <para>URI to Product Help. Used for Online F1 in the product and ARPHELPLINK in the installer.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.UriProductSupportEmail">
             <summary>
              <para>
                <c>#define UriProductSupportEmail mailto:support@jetbrains.com</c>
              </para>
              <para>Email to request for product support. The default is suitable for all JetBrains products.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.UriProductUninstallFeedback">
             <summary>
              <para>
                <c>#define UriProductUninstallFeedback http://www.jetbrains.com/dotcover/uninstall/dotcover.jsp</c>
              </para>
              <para>An URI to submit the Uninstall Feedback from the installer.</para>
              <para>This URI has query string parameters that are defined in the installer itself (one of its CAs).</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.UriProductUpdateInfoForInstaller">
             <summary>
              <para>
                <c>#define UriProductUpdateInfoForInstaller http://blogs.jetbrains.com/dotnet/category/news/</c>
              </para>
              <para>Installer's ARPURLUPDATEINFO. Default is applicable for dotnet products.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.UriUpdatesFilterXslt">
             <summary>
              <para>
                <c>#define UriUpdatesFilterXslt http://www.jetbrains.com/dotcover/updates/updates.dotcover.xslt</c>
              </para>
              <para>URI to get the XSLT with updates info from (see UpdatesManager).</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.VsPackageLoadKey">
             <summary>
              <para>
                <c>#define VsPackageLoadKey JetBrains s.r.o.;dotCover;2.5;standard;KAEQATDMATZCIZE8QCMKMJCMPQRQITHCE8RPIEJ3QJJAR0E8R8KZDPD2D9ETKRJCAHAHMZEDH3KIEMPDC9CDJHDRIDD1A0ECD2PKQEA2R0RKHAPIHTIJRHQCAAAHI9I1</c>
              </para>
              <para>VS PLK, as received from the Microsoft website. See “Changing Product Name and Version SOP” on how to do that. 
            		Format: “CompanyName;ProductName;ProductVersion2;VsMinEdition;PLK”. See VsPackageClassEmitter::PackageInfo for format details.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.VsPackageLoadKey_CompanyName">
             <summary>
              <para>
                <c>#define VsPackageLoadKey_CompanyName JetBrains s.r.o.</c>
              </para>
              <para>VS PLK, as received from the Microsoft website. See "Changing Product Name and Version SOP" on how to do that. 
                Format: "CompanyName;ProductName;ProductVersion2;VsMinEdition;PLK". See VsPackageClassEmitter::PackageInfo for format details.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.VsPackageLoadKey_PLK">
             <summary>
              <para>
                <c>#define VsPackageLoadKey_PLK KAEQATDMATZCIZE8QCMKMJCMPQRQITHCE8RPIEJ3QJJAR0E8R8KZDPD2D9ETKRJCAHAHMZEDH3KIEMPDC9CDJHDRIDD1A0ECD2PKQEA2R0RKHAPIHTIJRHQCAAAHI9I1</c>
              </para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.VsPackageLoadKey_ProductName">
             <summary>
              <para>
                <c>#define VsPackageLoadKey_ProductName dotCover</c>
              </para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.VsPackageLoadKey_ProductVersion">
             <summary>
              <para>
                <c>#define VsPackageLoadKey_ProductVersion 2.5</c>
              </para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.VsPackageLoadKey_VsMinEdition">
             <summary>
              <para>
                <c>#define VsPackageLoadKey_VsMinEdition standard</c>
              </para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Defines.Const">
             <summary>Literal versions of the properties.</summary>
            <remarks>Use these const fields only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly.</remarks>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.CompanyName">
             <summary>
              <para>
                <c>#define CompanyName JetBrains</c>
              </para>
              <para>Short company name.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.DateTimeForSubscriptionCheck">
             <summary>
              <para>
                <c>#define DateTimeForSubscriptionCheck </c>
              </para>
              <para>The date when the recent product's 2-digit version is released. Used for subscription license check.</para>
              <para>If the date is not set, product build time is used.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.DateTimeProductBirth">
             <summary>
              <para>
                <c>#define DateTimeProductBirth 2009-07-13</c>
              </para>
              <para>The date when the product was founded. Used for the lower copyright year and so on.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.GoogleAnalyticsProfileId">
             <summary>
              <para>
                <c>#define GoogleAnalyticsProfileId UA-36175489-2</c>
              </para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.GuidProductUpgradeCodeInstallationCenter">
             <summary>
              <para>
                <c>#define GuidProductUpgradeCodeInstallationCenter {DF895576-40DD-4008-A845-E18D5A796D0E}</c>
              </para>
              <para>Upgrade Code for the Installation Center family setups. In use starting with Platform-4.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.GuidVsActionsCommandSet">
             <summary>
              <para>
                <c>#define GuidVsActionsCommandSet {440D4099-5E59-4754-8169-AA01124DB1B8}</c>
              </para>
              <para>GUID for the command set of the product actions defined in Actions.Xml.
                 Each updatable action gets its GUID:ID pair with this GUID (this includes both action groups and executable actions).
                 Not sure about actions-with-group, though. 
                 In a VS-integrated product, must be overridden with a meaningful GUID.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.GuidVsDynamicCommandSet">
             <summary>
              <para>
                <c>#define GuidVsDynamicCommandSet {2C8417FA-DB9F-4E46-991E-9D886256A28E}</c>
              </para>
              <para>Command set GUID for the dynamic commands to be registered by the product at runtime. 
                In a VS-integrated product, must be overridden with a meaningful GUID.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.GuidVsGroupsCommandSet">
             <summary>
              <para>
                <c>#define GuidVsGroupsCommandSet {7FDFDEA5-CE22-4783-BABC-EA7F4EF137D3}</c>
              </para>
              <para>Command set GUID for the VS Command Groups that are generated to accomodate commands (created from IExecutableActions) in menus (created from IActionGroups).
                The IDs are entirely autogenerated by VSCT/CTO tool. 
                In a VS-integrated product, must be overridden with a meaningful GUID.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.GuidVsPackageCoClass">
             <summary>
              <para>
                <c>#define GuidVsPackageCoClass {7FFD1A80-7A5A-49B2-A39B-491C750984FF}</c>
              </para>
              <para>GUID of the VS Package COM object CoClass. Used on the autogenerated VS package class, and everywhere in the Registry. 
                In a VS-integrated product, must be overridden with a meaningful GUID.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.IsModeAnnotateCallStacks">
             <summary>
              <para>
                <c>#define IsModeAnnotateCallStacks False</c>
              </para>
              <para>Whether call stacks should be annotated when calling standard object methods. If there's a graph of standard objects identifyable only by names (eg IProperty, ICollection, ISignal, etc), a callstack of their interaction does not give out the names of the entities, unless this option is turned on. Has a perf impact.</para>
              <para>Default is ON. OFF for production builds.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.IsModeAssert">
             <summary>
              <para>
                <c>#define IsModeAssert False</c>
              </para>
              <para>Whether debug asserts should be active and throw runtime exceptions.</para>
              <para>Default is ON. OFF for production builds.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.IsModeReportExceptions">
             <summary>
              <para>
                <c>#define IsModeReportExceptions False</c>
              </para>
              <para>Whether exceptions are shown to the users. When OFF, the exceptions are silently omitted.</para>
              <para>Default is ON. OFF for production builds.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.IsModeStatistics">
             <summary>
              <para>
                <c>#define IsModeStatistics False</c>
              </para>
              <para>Whether statistics should be collected by the Statistics class.</para>
              <para>Default is OFF.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.IsMsiIncludePdb">
             <summary>
              <para>
                <c>#define IsMsiIncludePdb False</c>
              </para>
              <para>Whether PDBs for product binaries should be packed into the Setup.</para>
              <para>If True, it is an error if a PDB is missing.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.IsMsiIncludeXmlDoc">
             <summary>
              <para>
                <c>#define IsMsiIncludeXmlDoc True</c>
              </para>
              <para>Whether XmlDocs for product binaries should be packed into the Setup.</para>
              <para>If True, it is an error if an XmlDoc file is missing.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.IsMsiProductBinariesStrongName">
             <summary>
              <para>
                <c>#define IsMsiProductBinariesStrongName True</c>
              </para>
              <para>Whether product binaries packed into MSI must have strong names. If True, Setup build will fail unless assemblies have strong names.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.IsReleaseLicenseAgreement">
             <summary>
              <para>
                <c>#define IsReleaseLicenseAgreement True</c>
              </para>
              <para>Whether the Release license RTF file should be embedded into the installer. Default is False, which takes the pre-release file.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.LicenseProductFamily">
             <summary>
              <para>
                <c>#define LicenseProductFamily 59BB7CF0-D203-4E54-9A5F-04FBB1AEBCD4</c>
              </para>
              <para>A license GUID identifying the product family of the license. Now as we're using version numbers in the license (unlike early versions of ReSharper), this should be persisted throughout the product lifetime.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.LicenseSeed">
             <summary>
              <para>
                <c>#define LicenseSeed RLA90VMnIfMXmT4jbUVOo64qnJqs6APs7SgNXcQVoeeLMp5BpmU4fdw+impX+Wpd</c>
              </para>
              <para>The license state written to the Registry by the installer, which provides for a free trial.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.LicenseSupportIdentifier">
             <summary>
              <para>
                <c>#define LicenseSupportIdentifier DD1390D2-2986-498F-952A-4753C10337E2</c>
              </para>
              <para>An identifier for the evaluation license. Change it to reset the evaluation period.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ModeAnnotateCallStacksName">
             <summary>
              <para>
                <c>#define ModeAnnotateCallStacksName JET_MODE_ANNOTATE_CALL_STACKS</c>
              </para>
              <para>Name of the IsModeAssert-induced conditional compilation symbol.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ModeAssertName">
             <summary>
              <para>
                <c>#define ModeAssertName JET_MODE_ASSERT</c>
              </para>
              <para>Name of the IsModeAssert-induced conditional compilation symbol.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ModeReportExceptionsName">
             <summary>
              <para>
                <c>#define ModeReportExceptionsName JET_MODE_REPORT_EXCEPTIONS</c>
              </para>
              <para>Name of the IsModeReportExceptions-induced conditional compilation symbol.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ModeStatisticsName">
             <summary>
              <para>
                <c>#define ModeStatisticsName JET_MODE_STATISTICS</c>
              </para>
              <para>Name of the IsModeAssert-induced conditional compilation symbol.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.MsiSupportedVsVersionsList">
             <summary>
              <para>
                <c>#define MsiSupportedVsVersionsList 8.0;9.0;10.0;11.0</c>
              </para>
              <para>The list of VS Versions the installer should be able to install. Note that adding a new version requires modification of WiX code (and maybe some of the C++ code too). Removing versions from this list should generally go smoothly. Must follow the C++ vs versions lsit format, which is semicolon-separater major.minor.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NetfxRequiredVersionBuild">
             <summary>
              <para>
                <c>#define NetfxRequiredVersionBuild 0</c>
              </para>
              <para>The minimum .NET Framework version (Build component) required for installing &amp; runnning this product. The platform default is the minimum version required by the platform itself. Usually it's the same for the product.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NetfxRequiredVersionMajor">
             <summary>
              <para>
                <c>#define NetfxRequiredVersionMajor 3</c>
              </para>
              <para>The minimum .NET Framework version (Major component) required for installing &amp; runnning this product. The platform default is the minimum version required by the platform itself. Usually it's the same for the product.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NetfxRequiredVersionMinor">
             <summary>
              <para>
                <c>#define NetfxRequiredVersionMinor 5</c>
              </para>
              <para>The minimum .NET Framework version (Minor component) required for installing &amp; runnning this product. The platform default is the minimum version required by the platform itself. Usually it's the same for the product.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NetfxRequiredVersionRevision">
             <summary>
              <para>
                <c>#define NetfxRequiredVersionRevision 0</c>
              </para>
              <para>The minimum .NET Framework version (Revision component) required for installing &amp; runnning this product. The platform default is the minimum version required by the platform itself. Usually it's the same for the product.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NumLicenseAppVersion">
             <summary>
              <para>
                <c>#define NumLicenseAppVersion 2005</c>
              </para>
              <para>Application version for the licensing subsystem. Usually changes along with the ProductVersionMajor, but has its own numbering plan.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NumLicenseFeedbackRequestDays">
             <summary>
              <para>
                <c>#define NumLicenseFeedbackRequestDays 10</c>
              </para>
              <para>Number of days after installation and before feedback of whatever kind is requested.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NumLicenseFreeTrialDays">
             <summary>
              <para>
                <c>#define NumLicenseFreeTrialDays 30</c>
              </para>
              <para>Free trial days for a newly-installed product.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NumLicenseLeftDaysNotification">
             <summary>
              <para>
                <c>#define NumLicenseLeftDaysNotification 3</c>
              </para>
              <para>Number of days before license expires to notify the user of that.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NumTimeBombDays">
             <summary>
              <para>
                <c>#define NumTimeBombDays 0</c>
              </para>
              <para>The product will be inoperational when this time since build date expires. 0 means never expire (release mode), which is the default.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NUnitCpu">
             <summary>
              <para>
                <c>#define NUnitCpu x86</c>
              </para>
              <para>CPU platform of the NUnit runner process. Tests will be executed in this environment. Values: x86, x64, ANY.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NUnitInParallel">
             <summary>
              <para>
                <c>#define NUnitInParallel True</c>
              </para>
              <para>Allows running NUnit in parallel (one process per assembly, max CPU-count processes total).</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NUnitRuntime">
             <summary>
              <para>
                <c>#define NUnitRuntime v4.0</c>
              </para>
              <para>CLR version of the NUnit runner process. Tests will be executed in this environment. Values: v1.1, v2.0, v4.0, ANY.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NUnitVersion">
             <summary>
              <para>
                <c>#define NUnitVersion NUnit-2.6.1</c>
              </para>
              <para>Version of the NUnit runner used on TeamCity server. The special ReSharper make does better formatting of exception stack traces (without reversing the stacks).</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.PragmaOnce_Platform_Defines_Targets">
             <summary>
              <para>
                <c>#define PragmaOnce_Platform_Defines_Targets True</c>
              </para>
              <para>Pragma Once.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.PragmaOnce_Product_Defines_Targets">
             <summary>
              <para>
                <c>#define PragmaOnce_Product_Defines_Targets True</c>
              </para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ProductBranchName">
             <summary>
              <para>
                <c>#define ProductBranchName undefined</c>
              </para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ProductDisplayName">
             <summary>
              <para>
                <c>#define ProductDisplayName dotCover</c>
              </para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ProductFullName">
             <summary>
              <para>
                <c>#define ProductFullName dotCover 2.5</c>
              </para>
              <para>This full name is actually displayed in the User Interface in the About Boxes and such.
                  It should include the short product name and the marketing version of the product.
                  The bugfix upgate versions are visible thru this field only (eg “ProductName + " 3.0.2"”) and do not get into the actual technical file versions. Those can be found in the ProductInformation file linked into each of the projects.</para>
              <para>You MUST NOT use this define where an Application Descriptor is available (this includes any time when Shell is running). This is ONLY 
                for out-of-shell and build-time uses.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ProductName">
             <summary>
              <para>
                <c>#define ProductName dotCover</c>
              </para>
              <para>Name of the current product. If there're multiple products built on these sources, their least common generic name.</para>
              <para>The short ID-like product name, without any version suffixes.</para>
              <para>You MUST NOT use this define where an Application Descriptor is available (this includes any time when Shell is running). This is ONLY 
                for out-of-shell and build-time uses.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ProductStandaloneApplicationCaps">
             <summary>
              <para>
                <c>#define ProductStandaloneApplicationCaps None</c>
              </para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ProductUpgradeCodeLegacyVS0800">
             <summary>
              <para>
                <c>#define ProductUpgradeCodeLegacyVS0800 </c>
              </para>
              <para>Main historical Upgrade Code for the R# product line. In 3.0 era, was used by the VS80 branch only. Not used by the new products.</para>
              <para>Used by Installation Centers for detecting pre-Platform-4 products in VS80.</para>
              <para>Empty by default. Not a GUID type just to allow empty string values.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ProductUpgradeCodeLegacyVS0900">
             <summary>
              <para>
                <c>#define ProductUpgradeCodeLegacyVS0900 </c>
              </para>
              <para>Side Upgrade Code for the R# products. Was in use in the 3.0 era only, was used by the VS90 branch that had an upgrade line separate from that of VS80. Should be checked for when detecting older versions.</para>
              <para>Used by Installation Centers for detecting pre-Platform-4 products in VS90.</para>
              <para>Empty by default. Not a GUID type just to allow empty string values.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ProductUpgradeCodeLegacyVS1000">
             <summary>
              <para>
                <c>#define ProductUpgradeCodeLegacyVS1000 </c>
              </para>
              <para>Same as other ProductUpgradeCodeLegacy, but empty in all the products. Introduced for safe looping thru VS versions. Not a GUID type just to allow empty string values.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ProductVisualStudioIntegrationCaps">
             <summary>
              <para>
                <c>#define ProductVisualStudioIntegrationCaps Optional</c>
              </para>
              <para>A required parameter of a platform-based MSI Setup which defines the VS integration capabilities of the product.</para>
              <para>Defines whether the installer should suggest integrating the product into Visual Studio. Possible values are:</para>
              <para>“None” — the product has no VS integration capabilities. Example: early versions of some products like DotTrace Memory, Peek.</para>
              <para>“Optional” — the product can be used without VS, but also provides VS integration. Example: DotTrace Performance.</para>
              <para>“Required” — the product only exists as a VS extension and usually should not be installed without VS integration. Example: ReSharper.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.SccRevision">
             <summary>
              <para>
                <c>#define SccRevision CompiledWithoutBuildServer</c>
              </para>
              <para>Source code control revision string, if available. For a single SVN root, should be the revision number; for complicated cases — a freehand string exposing the source code control state.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.UriBuy">
             <summary>
              <para>
                <c>#define UriBuy http://www.jetbrains.com/dotcover/buy/</c>
              </para>
              <para>URI of the Webpage where the user could buy the product.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.UriCompany">
             <summary>
              <para>
                <c>#define UriCompany http://www.jetbrains.com</c>
              </para>
              <para>URI of the company Website.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.UriEvaluate">
             <summary>
              <para>
                <c>#define UriEvaluate http://www.jetbrains.com/dotcover/download/</c>
              </para>
              <para>URI of the Webpage where the user can download an evaluation version of the product.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.UriProduct">
             <summary>
              <para>
                <c>#define UriProduct http://www.jetbrains.com/dotcover/</c>
              </para>
              <para>Main product webpage URI. Also used for ARPURLINFOABOUT in the installer.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.UriProductCommunityNewsgroups">
             <summary>
              <para>
                <c>#define UriProductCommunityNewsgroups news://news.jetbrains.com/jetbrains.dotcover.community</c>
              </para>
              <para>URI to the product community (support/discussion) newsgroups.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.UriProductHelp">
             <summary>
              <para>
                <c>#define UriProductHelp http://www.jetbrains.com/dotcover/documentation/index.html</c>
              </para>
              <para>URI to Product Help. Used for Online F1 in the product and ARPHELPLINK in the installer.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.UriProductSupportEmail">
             <summary>
              <para>
                <c>#define UriProductSupportEmail mailto:support@jetbrains.com</c>
              </para>
              <para>Email to request for product support. The default is suitable for all JetBrains products.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.UriProductUninstallFeedback">
             <summary>
              <para>
                <c>#define UriProductUninstallFeedback http://www.jetbrains.com/dotcover/uninstall/dotcover.jsp</c>
              </para>
              <para>An URI to submit the Uninstall Feedback from the installer.</para>
              <para>This URI has query string parameters that are defined in the installer itself (one of its CAs).</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.UriProductUpdateInfoForInstaller">
             <summary>
              <para>
                <c>#define UriProductUpdateInfoForInstaller http://blogs.jetbrains.com/dotnet/category/news/</c>
              </para>
              <para>Installer's ARPURLUPDATEINFO. Default is applicable for dotnet products.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.UriUpdatesFilterXslt">
             <summary>
              <para>
                <c>#define UriUpdatesFilterXslt http://www.jetbrains.com/dotcover/updates/updates.dotcover.xslt</c>
              </para>
              <para>URI to get the XSLT with updates info from (see UpdatesManager).</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.VsPackageLoadKey">
             <summary>
              <para>
                <c>#define VsPackageLoadKey JetBrains s.r.o.;dotCover;2.5;standard;KAEQATDMATZCIZE8QCMKMJCMPQRQITHCE8RPIEJ3QJJAR0E8R8KZDPD2D9ETKRJCAHAHMZEDH3KIEMPDC9CDJHDRIDD1A0ECD2PKQEA2R0RKHAPIHTIJRHQCAAAHI9I1</c>
              </para>
              <para>VS PLK, as received from the Microsoft website. See “Changing Product Name and Version SOP” on how to do that. 
            		Format: “CompanyName;ProductName;ProductVersion2;VsMinEdition;PLK”. See VsPackageClassEmitter::PackageInfo for format details.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.VsPackageLoadKey_CompanyName">
             <summary>
              <para>
                <c>#define VsPackageLoadKey_CompanyName JetBrains s.r.o.</c>
              </para>
              <para>VS PLK, as received from the Microsoft website. See "Changing Product Name and Version SOP" on how to do that. 
                Format: "CompanyName;ProductName;ProductVersion2;VsMinEdition;PLK". See VsPackageClassEmitter::PackageInfo for format details.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.VsPackageLoadKey_PLK">
             <summary>
              <para>
                <c>#define VsPackageLoadKey_PLK KAEQATDMATZCIZE8QCMKMJCMPQRQITHCE8RPIEJ3QJJAR0E8R8KZDPD2D9ETKRJCAHAHMZEDH3KIEMPDC9CDJHDRIDD1A0ECD2PKQEA2R0RKHAPIHTIJRHQCAAAHI9I1</c>
              </para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.VsPackageLoadKey_ProductName">
             <summary>
              <para>
                <c>#define VsPackageLoadKey_ProductName dotCover</c>
              </para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.VsPackageLoadKey_ProductVersion">
             <summary>
              <para>
                <c>#define VsPackageLoadKey_ProductVersion 2.5</c>
              </para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.VsPackageLoadKey_VsMinEdition">
             <summary>
              <para>
                <c>#define VsPackageLoadKey_VsMinEdition standard</c>
              </para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
    </members>
</doc>
